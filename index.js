const TelegramBot = require('node-telegram-bot-api');
const {API_KEY_BOT, ID_USER, PASSWORD} = require('../config_bot.js');
//!teamsDoNotRepeat
const {sections, hours, minutes, amountWords, —Åontinue, teamsRepeat, teamsDoNotRepeat} = require('./src/sections');
const {commands} = require('./src/commands');
const {findWord, initialization, findUser, addUser, addHours, addMinutes,
       addAmountWords, getUsers, dayLessonUserUpdate, getWords, learnedWordIdUpdate,
       gat–êccess, addRequests} = require('./src/api.js');
const {clock} = require('./src/utility/drawGraph.js')

const bot = new TelegramBot(API_KEY_BOT, {
  polling: {
    interval: 1000,
    autoStart: true
  }
});

const isAccess = (id, user, msg, text) => {
  if(user.length === 0) {
    addUser(msg.from);
    return false;
  } else {
    if(PASSWORD === text) {
      gat–êccess(id);
      setTimeout(() => bot.sendMessage(id, `‚úã –ü—Ä–∏–≤–µ—Ç! \n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ª–æ–≤–∞—Ä—å üìö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. \n–ï–≥–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è üë®‚Äçüè´ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å.`), 800);
      setTimeout(() => bot.sendMessage(id, '‚úÖ–í—ã–±–µ—Ä–∏—Ç–µ: ', sections), 800);
      setTimeout(() => bot.sendMessage(ID_USER, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), 800);
      return true;
    } else if(ID_USER !== msg.from.id && user[0].access !== 1) {
      bot.sendMessage(id, '‚úã –ü—Ä–∏–≤–µ—Ç! –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ! üòï');
      return false;
    } else {
      return true;
    }
  }
}

initialization();
bot.on("polling_error", err => console.log(err));
bot.on('text', async msg => {
  const id = msg.chat.id;
  const text = msg.text;
  const user = await findUser(msg.from.id);
  const access = isAccess(id, user, msg, text);
  if(!access) return null;

  try {
    switch(text) {
      case '/start':
        setTimeout(() => bot.sendMessage(id, `‚úã –ü—Ä–∏–≤–µ—Ç! \n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ª–æ–≤–∞—Ä—å üìö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. \n–ï–≥–æ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è üë®‚Äçüè´ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å.`, sections), 800);
        break;
      default:
        if(PASSWORD === text) return null;
        const result = await findWord(text);
        if (result === undefined) return bot.sendMessage(id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ!');
        const {word, transcription, translation} = result;
        await bot.sendMessage(id, word + ' ' + transcription + ' ' + translation, teamsRepeat);
    }
  }
  catch(error) {
    console.log(error);
  }
});

bot.setMyCommands(commands);

bot.on('callback_query', async msg => {
  const text = msg.data;
  const id = msg.message.chat.id;
  const user = await findUser(id);
  const access = isAccess(id, user, msg, text);
  if(!access) return null;
    switch(text) {
      case '/—Åhoose time to study':
        setTimeout(() => bot.sendMessage(id, 'üïõ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å: ', hours), 500);
        break;
      case '/select number of words':
        setTimeout(() => bot.sendMessage(id, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ', amountWords), 500);
        break;
      case '/start training':
        const words = await getWords(user[0].learnedWordId, user[0].amountWords);
        let arr = words.map(item => {
          const text = item.word + ' [' + item.transcription + '] ' + item.translation;
          return [{text, callback_data: '/' + item.word}]
        });
        arr = [...arr, [{text: 'üë©‚Äçüè´ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: '/start training'}]];
        const newWords = {
          reply_markup: JSON.stringify({
              inline_keyboard: arr
          })
        }
        setTimeout(() => bot.sendMessage(user[0].user_id, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç–∏ —Å–ª–æ–≤–∞: ', newWords), 300);

        learnedWordIdUpdate(user[0].learnedWordId + user[0].amountWords, user[0].user_id);
        // –í–Ω–æ—Å–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        const date = new Date();
        let time = date.getTime();
        await addRequests(user[0].user_id, user[0].amountWords, time);
        break;
      default:
        if(text.includes('/hours')){
          const userHours = parseInt(text.replace('/hours_', ''));
          addHours(userHours, id);
          setTimeout(() => bot.sendMessage(id, 'üïí –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã: ', minutes), 500);
        } else if(text.includes('/minutes')){
          const userMinutes = parseInt(text.replace('/minutes_', ''));
          addMinutes(userMinutes, id);
          if(user[0].amountWords === 0) {
            setTimeout(() => bot.sendMessage(id, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ', amountWords), 500);
          } else {
            setTimeout(() => bot.sendMessage(id, 'ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! \n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ ' + user[0].hours + ' —á–∞—Å. ' + userMinutes + ' –º–∏–Ω.' + ' –º—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å –ø–æ ' + user[0].amountWords + ' —Å–ª–æ–≤(a).'), 500);
          }
        } else if(text.includes('/amountWords')){
          const amountWords = parseInt(text.replace('/amountWords_', ''));
          addAmountWords(amountWords, id);
          setTimeout(() => bot.sendMessage(id, 'ü§ù –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! \n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ ' + user[0].hours + ' —á–∞—Å. ' + user[0].minutes + ' –º–∏–Ω.' + ' –º—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å –ø–æ ' + amountWords + ' —Å–ª–æ–≤(a).'), 500);
        } else if(text.includes('/study statistics')){
          clock();
          //! –ù–ï–û–ë–•–û–î–ò–ú–û
          /**
            –ù–µ–æ–±—Ö–æ–¥–∏–º–æ:
            1. –î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–æ–∫—É –î–ê–¢–ê –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ, –ö–û–õ–ò–ß–ï–°–¢–í–û –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤
            2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            3. –ù–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
          */
        }
        //! –ï–°–õ–ò –í–´–ë–†–ê–ù–û –°–õ–û–í–û, –¢–û –ù–ï–û–ë–•–û–î–ò–ú–û –ï–ì–û –û–¢–û–ë–†–ê–ó–ò–¢–¨ –ó–ê–ù–û–í–û –° –ü–ï–†–ï–í–û–î–û–ú –ò –í–´–ë–û–†–û–ú –û–ü–¶–ò–ô
        if(text.indexOf('/') == -1){
          const selectedWord = text.replace('/', '');
          const result = await findWord(selectedWord);
          console.log(text);
          const {word, transcription, translation} = result;
          //! –ü–æ—Å—Ç–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è–µ teamsRepeat –ª–∏–±–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å, –ª–∏–±–æ —Å–Ω—è—Ç—å —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
          await bot.sendMessage(id, word + ' ' + transcription + ' ' + translation, teamsRepeat);
        } else {
          console.log(text);
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç –∏ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è –≤—ã—Å—ã–ª–∞–µ—Ç —Å–ª–æ–≤–∞
setInterval(async () => {
  const currentDate = new Date();
  const currentDay = currentDate.getDate();
  const hours = currentDate.getHours();
  const minutes = currentDate.getMinutes();
  const users = await getUsers();
  users.forEach(async user => {
    if(user.amountWords > 0 && user.dayLesson !== currentDay){
      if(user.hours === hours){
        // –î–æ–ø—É—Å—Ç–∏–º–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1 –º–∏–Ω—É—Ç—É
        if(minutes === user.minutes || user.minutes === minutes + 1){
          const words = await getWords(user.learnedWordId, user.amountWords);
          words.forEach((item, i) => {
            const text = item.word + ' [' + item.transcription + '] ' + item.translation;
            if(countWords === i) return setTimeout(() => bot.sendMessage(user.user_id, text, —Åontinue), 1200);
            setTimeout(() => bot.sendMessage(user.user_id, text), 200);
          });
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—É—á–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞
          learnedWordIdUpdate(user.learnedWordId + user.amountWords, user.user_id)
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
          dayLessonUserUpdate(currentDay, user.user_id);
        }
      }
    }
  });
  // —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –±–æ–ª—å—à–µ 0
  // –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–µ + 1 –º–∏–Ω—É—Ç–∞,
  // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
}, 1000);
